{"version":3,"sources":["../../app-ee6/services/ConnectionFactory.js"],"names":["ConnectionFactory","tmp","stores","VERSION","dbName","connection","close","Error","cnn","forEach","objectStoreNames","contains","name","deleteObjectStore","createObjectStore","autoIncrement","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","target","result","_createStores","onerror","console","log","error","onsuccess","bind"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,SAASC,GAAT,GAAe;;AAEvC,KAAMC,SAAS,CAAC,aAAD,CAAf;AACA,KAAMC,UAAU,CAAhB;AACA,KAAMC,SAAS,YAAf;AACA,KAAIC,aAAa,IAAjB;AACA,KAAIC,QAAQ,IAAZ;AACA;AAEC,+BAAc;AAAA;;AACb,SAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACA;;AAJF;AAAA;AAAA,iCAMsBC,GANtB,EAM2B;;AAEzBN,WAAOO,OAAP,CAAe,gBAAQ;;AAEtB,SAAID,IAAIE,gBAAJ,CAAqBC,QAArB,CAA8BC,IAA9B,CAAJ,EAAyC;AACxCJ,UAAIK,iBAAJ,CAAsBD,IAAtB;AAEA;AACDJ,SAAIM,iBAAJ,CAAsBF,IAAtB,EAA4B,EAAEG,eAAe,IAAjB,EAA5B;AAEA,KARD;AAYA;AApBF;AAAA;AAAA,qCAqByB;AACvB,QAAIV,UAAJ,EAAe;AACdC;AACAD,kBAAa,IAAb;AACA;AACD;AA1BF;AAAA;AAAA,mCA4BwB;;AAEtB,WAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBlB,MAAtB,EAA8BD,OAA9B,CAAlB;AACAgB,iBAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACpC,UAAI,CAACnB,UAAL,EAAgB;AACfA,oBAAamB,EAAEC,MAAF,CAASC,MAAtB;AACA;;AAED1B,wBAAkB2B,aAAlB,CAAgCtB,UAAhC;AACA,MAND;AAOAc,iBAAYS,OAAZ,GAAsB,UAACJ,CAAD,EAAO;AAC5BK,cAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAb,aAAOM,EAAEC,MAAF,CAASM,KAAT,CAAenB,IAAtB;AAEA,MAJD;AAKAO,iBAAYa,SAAZ,GAAwB,UAACR,CAAD,EAAO;AAC9B,UAAI,CAACnB,UAAL,EAAgB;AACfA,oBAAamB,EAAEC,MAAF,CAASC,MAAtB;AACApB,eAAQD,WAAWC,KAAX,CAAiB2B,IAAjB,CAAsB5B,UAAtB,CAAR;AACAA,kBAAWC,KAAX,GAAmB,YAAU;AAC5B,cAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACA,QAFD;AAGA;;AAEDU,cAAQZ,UAAR;AAEA,MAXD;AAaA,KA5BM,CAAP;AA8BA;AA5DF;;AAAA;AAAA;AAgEA,CAvEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function tmp() {\n\n\tconst stores = ['negociacoes']\n\tconst VERSION = 4\n\tconst dbName = 'aluraframe'\n\tvar connection = null\n\tvar close = null\n\treturn class ConnectionFactory {\n\n\t\tconstructor() {\n\t\t\tthrow new Error('Não é possivel instnciar')\n\t\t}\n\n\t\tstatic _createStores(cnn) {\n\n\t\t\tstores.forEach(name => {\n\n\t\t\t\tif (cnn.objectStoreNames.contains(name)) {\n\t\t\t\t\tcnn.deleteObjectStore(name)\n\n\t\t\t\t}\n\t\t\t\tcnn.createObjectStore(name, { autoIncrement: true })\n\n\t\t\t})\n\n\n\n\t\t}\n\t\tstatic closeConnection(){\n\t\t\tif (connection){\n\t\t\t\tclose()\n\t\t\t\tconnection = null\n\t\t\t}\n\t\t}\n\n\t\tstatic getConnection() {\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tlet openRequest = window.indexedDB.open(dbName, VERSION)\n\t\t\t\topenRequest.onupgradeneeded = (e) => {\n\t\t\t\t\tif (!connection){\n\t\t\t\t\t\tconnection = e.target.result\n\t\t\t\t\t}\n                    \n\t\t\t\t\tConnectionFactory._createStores(connection)\n\t\t\t\t}\n\t\t\t\topenRequest.onerror = (e) => {\n\t\t\t\t\tconsole.log(e.target.error)\n\t\t\t\t\treject(e.target.error.name)\n\n\t\t\t\t}\n\t\t\t\topenRequest.onsuccess = (e) => {\n\t\t\t\t\tif (!connection){\n\t\t\t\t\t\tconnection = e.target.result\n\t\t\t\t\t\tclose = connection.close.bind(connection)\n\t\t\t\t\t\tconnection.close = function(){\n\t\t\t\t\t\t\tthrow new Error('You cannot close connnectin throgh this method')\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n                    \n\t\t\t\t\tresolve(connection)\n\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t}\n\n\t}\n\n})()\n\n"]}