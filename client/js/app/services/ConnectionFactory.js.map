{"version":3,"sources":["../../app-ee6/services/ConnectionFactory.js"],"names":["stores","VERSION","dbName","connection","close","ConnectionFactory","Error","cnn","forEach","objectStoreNames","contains","name","deleteObjectStore","createObjectStore","autoIncrement","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","target","result","_createStores","onerror","console","log","error","onsuccess","bind"],"mappings":";;;;;;;;;;AAIA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IACaC,iB,WAAAA,iB;AAEZ,8BAAc;AAAA;;AACb,QAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACA;;;;gCAEoBC,G,EAAK;;AAEzBP,UAAOQ,OAAP,CAAe,gBAAQ;;AAEtB,QAAID,IAAIE,gBAAJ,CAAqBC,QAArB,CAA8BC,IAA9B,CAAJ,EAAyC;AACxCJ,SAAIK,iBAAJ,CAAsBD,IAAtB;AAEA;AACDJ,QAAIM,iBAAJ,CAAsBF,IAAtB,EAA4B,EAAEG,eAAe,IAAjB,EAA5B;AAEA,IARD;AAYA;;;oCACwB;AACxB,OAAIX,UAAJ,EAAgB;AACfC;AACAD,iBAAa,IAAb;AACA;AACD;;;kCAEsB;;AAEtB,UAAO,IAAIY,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,QAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBnB,MAAtB,EAA8BD,OAA9B,CAAlB;AACAiB,gBAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACpC,SAAI,CAACpB,UAAL,EAAiB;AAChBA,mBAAaoB,EAAEC,MAAF,CAASC,MAAtB;AACA;;AAEDpB,uBAAkBqB,aAAlB,CAAgCvB,UAAhC;AACA,KAND;AAOAe,gBAAYS,OAAZ,GAAsB,UAACJ,CAAD,EAAO;AAC5BK,aAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;AACAb,YAAOM,EAAEC,MAAF,CAASM,KAAT,CAAenB,IAAtB;AAEA,KAJD;AAKAO,gBAAYa,SAAZ,GAAwB,UAACR,CAAD,EAAO;AAC9B,SAAI,CAACpB,UAAL,EAAiB;AAChBA,mBAAaoB,EAAEC,MAAF,CAASC,MAAtB;AACArB,cAAQD,WAAWC,KAAX,CAAiB4B,IAAjB,CAAsB7B,UAAtB,CAAR;AACAA,iBAAWC,KAAX,GAAmB,YAAY;AAC9B,aAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACA,OAFD;AAGA;;AAEDU,aAAQb,UAAR;AAEA,KAXD;AAaA,IA5BM,CAAP;AA8BA","file":"ConnectionFactory.js","sourcesContent":["\n\n\n\nconst stores = ['negociacoes']\nconst VERSION = 4\nconst dbName = 'aluraframe'\nvar connection = null\nvar close = null\nexport class ConnectionFactory {\n\n\tconstructor() {\n\t\tthrow new Error('Não é possivel instnciar')\n\t}\n\n\tstatic _createStores(cnn) {\n\n\t\tstores.forEach(name => {\n\n\t\t\tif (cnn.objectStoreNames.contains(name)) {\n\t\t\t\tcnn.deleteObjectStore(name)\n\n\t\t\t}\n\t\t\tcnn.createObjectStore(name, { autoIncrement: true })\n\n\t\t})\n\n\n\n\t}\n\tstatic closeConnection() {\n\t\tif (connection) {\n\t\t\tclose()\n\t\t\tconnection = null\n\t\t}\n\t}\n\n\tstatic getConnection() {\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tlet openRequest = window.indexedDB.open(dbName, VERSION)\n\t\t\topenRequest.onupgradeneeded = (e) => {\n\t\t\t\tif (!connection) {\n\t\t\t\t\tconnection = e.target.result\n\t\t\t\t}\n\n\t\t\t\tConnectionFactory._createStores(connection)\n\t\t\t}\n\t\t\topenRequest.onerror = (e) => {\n\t\t\t\tconsole.log(e.target.error)\n\t\t\t\treject(e.target.error.name)\n\n\t\t\t}\n\t\t\topenRequest.onsuccess = (e) => {\n\t\t\t\tif (!connection) {\n\t\t\t\t\tconnection = e.target.result\n\t\t\t\t\tclose = connection.close.bind(connection)\n\t\t\t\t\tconnection.close = function () {\n\t\t\t\t\t\tthrow new Error('You cannot close connnectin throgh this method')\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tresolve(connection)\n\n\t\t\t}\n\n\t\t})\n\n\t}\n\n}\n"]}