{"version":3,"sources":["../../app-ee6/services/HttpService.js"],"names":["HttpService","url","method","data","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","JSON","parse","responseText","send","stringify","fetch","haeders","body","then","_handleError","res","json","ok","Error","statuText"],"mappings":";;;;;;IAAMA,W;;;;;;;6BAMMC,G,EAAKC,M,EAAQC,I,EAAK;;AAI5B,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAGvC,QAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,QAAIE,IAAJ,CAASP,MAAT,EAAiBD,GAAjB;AACA,QAAIE,IAAJ,EAAS;AACRI,SAAIG,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACA;AACD;AACA;AACA;AACA;AACA;AACA;;AAEAH,QAAII,kBAAJ,GAAyB,YAAM;AAC9B,SAAIJ,IAAIK,UAAJ,IAAkB,CAAtB,EAAyB;;AAGxB,UAAIL,IAAIM,MAAJ,IAAc,GAAlB,EAAuB;;AAEtBC,eAAQC,GAAR,CAAY,gCAAZ;AACAV,eAAQW,KAAKC,KAAL,CAAWV,IAAIW,YAAf,CAAR;AAEA,OALD,MAKO;AACNJ,eAAQC,GAAR,CAAYR,IAAIW,YAAhB;AACAZ,cAAOC,IAAIW,YAAX;AACA;AAED;AAED,KAhBD;AAiBA,QAAIf,IAAJ,EAAS;AACRI,SAAIY,IAAJ,CAASH,KAAKI,SAAL,CAAejB,IAAf,CAAT;AACA,KAFD,MAEO;AACNI,SAAIY,IAAJ;AACA;AAGD,IAvCM,CAAP;AAyCA;;;uBAGIlB,G,EAAKE,I,EAAK;AAAA;;AACd,UAAOkB,MAAMpB,GAAN,EAAW;AACjBqB,aAAQ,EAAC,gBAAgB,kBAAjB,EADS;AAEjBpB,YAAQ,MAFS;AAGjBqB,UAAMP,KAAKI,SAAL,CAAejB,IAAf;AAHW,IAAX,EAIJqB,IAJI,CAIC;AAAA,WAAK,MAAKC,YAAL,CAAkBC,GAAlB,CAAL;AAAA,IAJD,EAKNF,IALM,CAKD;AAAA,WAAKE,IAAIC,IAAJ,EAAL;AAAA,IALC,CAAP;AAMA;AACA;;;+BAEYD,G,EAAI;AAChB,OAAI,CAACA,IAAIE,EAAT,EAAY;AACX,UAAM,IAAIC,KAAJ,CAAUH,IAAII,SAAd,CAAN;AACA;AACD,UAAOJ,GAAP;AACA;;;sBAGGzB,G,EAAI;AAAA;;AACP,UAAOoB,MAAMpB,GAAN,EACNuB,IADM,CACD;AAAA,WAAM,OAAKC,YAAL,CAAkBC,GAAlB,CAAN;AAAA,IADC,EAENF,IAFM,CAED;AAAA,WAAME,IAAIC,IAAJ,EAAN;AAAA,IAFC,CAAP;AAGA","file":"HttpService.js","sourcesContent":["class HttpService {\n\n\n\n\n\n\t_doRequest(url, method, data){\n\t\t\n        \n\n\t\treturn new Promise((resolve, reject) => {\n\n\n\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\txhr.open(method, url);\n\t\t\tif (data){\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\t\t\t}\n\t\t\t//configurações\n\t\t\t//0 requisicao não iniciada\n\t\t\t//1 conexão com servidor estabelecida\n\t\t\t//2 requisição recebida\n\t\t\t//3 processando requisição\n\t\t\t//4 reuisição concluida e a resposta está pronta\n\n\t\t\txhr.onreadystatechange = () => {\n\t\t\t\tif (xhr.readyState == 4) {\n\n\n\t\t\t\t\tif (xhr.status == 200) {\n\n\t\t\t\t\t\tconsole.log(\"Negociaçõe obtidas com sucesso\");\n\t\t\t\t\t\tresolve(JSON.parse(xhr.responseText));                        \n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(xhr.responseText)\n\t\t\t\t\t\treject(xhr.responseText);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (data){\n\t\t\t\txhr.send(JSON.stringify(data))\n\t\t\t} else {\n\t\t\t\txhr.send();\n\t\t\t}\n            \n\n\t\t});\n\n\t}\n\n\n\tpost(url, data){\n\t\treturn fetch(url, {\n\t\t\thaeders:{'Content-type': 'application/json'},\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(data)\n\t\t}).then(res=>this._handleError(res))\n\t\t.then(res=>res.json());\n\t\t//return this._doRequest(url, \"POST\", data);\n\t}\n\n\t_handleError(res){\n\t\tif( !res.ok){\n\t\t\tthrow new Error(res.statuText);\t\t\t\n\t\t}\n\t\treturn res;\n\t}\n\n    \n\tget(url){\n\t\treturn fetch(url)\n\t\t.then(res=> this._handleError(res) )\n\t\t.then(res=> res.json());\n\t}\n}"]}