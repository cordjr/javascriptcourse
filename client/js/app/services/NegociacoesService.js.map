{"version":3,"sources":["../../app-ee6/services/NegociacoesService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","ConnectionFactory","getConnection","then","NegociacaoDao","cnn","dao","listaTodos","lista","catch","err","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","negociacoes","reduce","flatArray","array","concat","console","log","listaAtual","obterNegociacoes","listaFiltrada","filter","some","n","isEquals","nExistente","Error","negociacao","adiciona","apagaTodos","endpont","get","result","map","obj","Negociacao","Date","data","quantidade","valor","xhr","responseText","post","cb","_obterNegociacoes"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["class NegociacaoService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    lista() {\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection()\n                .then(cnn => new NegociacaoDao(cnn))\n                .then(dao => dao.listaTodos())\n                .then(lista => resolve(lista))\n                .catch(err => reject(err));\n\n        });\n\n\n\n    }\n    obterNegociacoes() {\n        return new Promise((resolve, reject) => {\n\n            let all = Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]).then(negociacoes => {\n                \n                let all = negociacoes.reduce(\n                    (flatArray, array) => flatArray.concat(array), [])\n                console.log(\"lista filtrada =>\", all);\n               resolve(all);\n\n\n\n            }).catch(err => reject(err));\n            \n\n\n        })\n\n\n    }\n    importa(listaAtual) {\n        return this.obterNegociacoes().then(\n\n            (lista) => {\n                \n                let listaFiltrada = lista\n                    .filter(n => !listaAtual\n                        .some(nExistente => n.isEquals(nExistente))\n                    )\n                console.log(listaFiltrada)\n                return listaFiltrada;\n            }\n        )\n            .catch(err => {\n                console.log(err);\n                throw new Error(\"Não foi possível imporar as neogociações\");\n            })\n    }\n\n\n\n    cadastra(negociacao) {\n\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection().then(cnn => {\n\n                new NegociacaoDao(cnn)\n                    .adiciona(negociacao)\n                    .then(() => {\n                        resolve(negociacao)\n                    }).catch(err => {\n                        console.log(err)\n                        reject(err)\n                    });\n\n            }).catch(err => {\n                console.log(err);\n                reject(err);\n            });\n\n        });\n\n    }\n\n    apagaTodos() {\n        return new Promise((resolve, reject) => {\n            ConnectionFactory.getConnection()\n                .then(cnn => new NegociacaoDao(cnn))\n                .then(dao => dao.apagaTodos())\n                .then(() => {\n                    resolve();\n                })\n                .catch(err => {\n                    console.log(err);\n                    reject(err);\n                });\n        });\n    }\n\n\n    _obterNegociacoes(endpont) {\n\n\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get(endpont)\n                .then(negociacoes => {\n                    let result = negociacoes.map((obj) => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor));\n                    resolve(result);\n                })\n                .catch(error => {\n                    console.log(xhr.responseText)\n                    reject(\"Não foi possível obter negociações da semana\");\n\n                });\n        })\n\n    }\n\n\n\n\n    adiciona(negociacao) {\n        return this._http.post('/negociacoes', negociacao);\n    }\n\n\n\n    obterNegociacoesDaSemana(cb) {\n        return this._obterNegociacoes('negociacoes/semana');\n    }\n\n    obterNegociacoesDaSemanaAnterior(cb) {\n        return this._obterNegociacoes('negociacoes/anterior', cb);\n    }\n\n    obterNegociacoesDaSemanaRetrasada(cb) {\n        return this._obterNegociacoes('negociacoes/retrasada', cb);\n    }\n\n\n\n}"]}