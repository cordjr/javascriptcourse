{"version":3,"sources":["../../app-ee6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_conection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","clear","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue"],"mappings":";;;;;;IAAMA,a;AACL,wBAAYC,UAAZ,EAAwB;AAAA;;AACvB,OAAKC,UAAL,GAAkBD,UAAlB;AACA,OAAKE,MAAL,GAAc,aAAd;AACA;;;;2BACQC,U,EAAY;AAAA;;AACpB,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAIC,UAAU,MAAKN,UAAL,CACbO,WADa,CACD,CAAC,MAAKN,MAAN,CADC,EACc,WADd,EAEZO,WAFY,CAEA,MAAKP,MAFL,EAGZQ,GAHY,CAGRP,UAHQ,CAAd;;AAMAI,YAAQI,SAAR,GAAoB;AAAA,YAAKN,SAAL;AAAA,KAApB;AACAE,YAAQK,OAAR,GAAkB,aAAK;AACtBC,aAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,YAAO,kBAAP;AAEA,KAJD;AAKA,IAbM,CAAP;AAcA;;;+BAEW;AAAA;;AACX,UAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACrC,QAAIC,UAAU,OAAKN,UAAL,CACbO,WADa,CACD,CAAC,OAAKN,MAAN,CADC,EACc,WADd,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZgB,KAHY,EAAd;AAIAX,YAAQK,OAAR,GAAkB,aAAI;AACrBC,aAAQC,GAAR,CAAYC,CAAZ;AACAT,YAAO,oCAAP;AACA,KAHD;AAIAC,YAAQI,SAAR,GAAoB;AAAA,YAAIN,SAAJ;AAAA,KAApB;AAEA,IAXM,CAAP;AAYA;;;+BAEY;AAAA;;AACZ,UAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAIa,SAAS,OAAKlB,UAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACe,WADf,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGXkB,UAHW,EAAb;AAIAD,WAAOP,OAAP,GAAiB;AAAA,YAAKN,OAAOS,CAAP,CAAL;AAAA,KAAjB;AACA,QAAIM,cAAc,EAAlB;AACAF,WAAOR,SAAP,GAAoB,aAAK;AACxB,SAAIW,QAAQP,EAAEC,MAAF,CAASO,MAArB;AACA,SAAID,KAAJ,EAAW;AACV,UAAIE,OAAOF,MAAMG,KAAjB;AACAJ,kBAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,YAAMS,QAAN;AAEA,MALD,MAKM;AACL1B,cAAQgB,WAAR;AACA;AAGD,KAZD;AAcA,IArBM,CAAP;AAsBA","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\tconstructor(connection) {\n\t\tthis._conection = connection\n\t\tthis._store = 'negociacoes'\n\t}\n\tadiciona(negociacao) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet request = this._conection.\n\t\t\t\ttransaction([this._store], 'readwrite')\n\t\t\t\t.objectStore(this._store)\n\t\t\t\t.add(negociacao)\n\n\n\t\t\trequest.onsuccess = ()=> resolve()\n\t\t\trequest.onerror = e => {\n\t\t\t\tconsole.log(e.target.error)\n\t\t\t\treject(\"Ocorreu um erro \")\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t}\n\n\tapagaTodos(){\n\t\treturn new Promise((resolve, reject)=>{\n\t\t\tlet request = this._conection.\n\t\t\t\ttransaction([this._store], 'readwrite')\n\t\t\t\t.objectStore(this._store)\n\t\t\t\t.clear();\n\t\t\trequest.onerror = e =>{\n\t\t\t\tconsole.log(e);\n\t\t\t\treject('Ocorreu um erro ao limpar a tabela');\n\t\t\t}\n\t\t\trequest.onsuccess = e=> resolve();\n\n\t\t});\n\t}\n\n\tlistaTodos() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet cursor = this._conection.\n\t\t\t\ttransaction([this._store], 'readwrite')\n\t\t\t\t.objectStore(this._store)\n\t\t\t\t.openCursor();\n\t\t\tcursor.onerror = e => reject(e);\n\t\t\tlet negociacoes = [];\n\t\t\tcursor.onsuccess = (e => {\n\t\t\t\tlet atual = e.target.result;\n\t\t\t\tif (atual) {\n\t\t\t\t\tvar dado = atual.value;\n\t\t\t\t\tnegociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n\t\t\t\t\tatual.continue();\n\n\t\t\t\t} else{\n\t\t\t\t\tresolve(negociacoes);\n\t\t\t\t}\n\n\n\t\t\t});\n\n\t\t});\n\t}\n}"]}